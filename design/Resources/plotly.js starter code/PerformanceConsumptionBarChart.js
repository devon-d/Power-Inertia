// code for production 

var seriesName1 = "Solar Energy Generated (kWh)" 
var seriesName2 = "Battery Energy Discharged (kWh)" 

var barColor1 = "F59E0B"
var barColor2 = "64B583"
// var exampleJSON

let sampleResponse = [['2023-04-04T15:00:00.000Z', 47.0, 30.0, 0.0, -15.0, 0.0, -15.0, 14.0], //timezone	solar_generated_kwh	inverter_discharge_kwh	inverter_charge_kwh	net_energy_consumption_kwh	imported_grid_energy_consumption_kwh	exported_grid_energy_consumption_kwh	total_building_demand_kwh
 ['2023-04-04T14:00:00.000Z', 54.0, 30.0, 0.0, -13.0, 0.0, -13.0, 17.0],
 ['2023-04-04T13:00:00.000Z', 52.0, 30.0, 0.0, -11.0, 0.0, -11.0, 18.0],
 ['2023-04-04T12:00:00.000Z', 51.0, 30.0, 0.0, -3.0, 0.0, -3.0, 27.0],
 ['2023-04-04T11:00:00.000Z', 52.0, 25.0, 0.0, -4.0, 0.0, -4.0, 20.0],
 ['2023-04-04T10:00:00.000Z', 43.0, 20.0, 0.0, 0.0, 0.0, 0.0, 20.0],
 ['2023-04-04T09:00:00.000Z', 28.0, 22.0, 0.0, 9.0, 9.0, 0.0, 9.0],
 ['2023-04-04T08:00:00.000Z', 10.0, 0.0, 0.0, 14.0, 14.0, 0.0, 14.0],
 ['2023-04-04T07:00:00.000Z', 2.0, 0.0, 0.0, 10.0, 10.0, 0.0, 10.0],
 ['2023-04-04T06:00:00.000Z', 1.0, 0.0, 0.0, 9.0, 9.0, 0.0, 9.0],
 ['2023-04-04T05:00:00.000Z', 0.0, 0.0, 0.0, 9.0, 9.0, 0.0, 9.0],
 ['2023-04-04T04:00:00.000Z', 0.0, 0.0, 0.0, 9.0, 9.0, 0.0, 9.0],
 ['2023-04-04T03:00:00.000Z', 0.0, 0.0, 0.0, 8.0, 8.0, 0.0, 8.0],
 ['2023-04-04T02:00:00.000Z', 0.0, 0.0, 0.0, 9.0, 9.0, 0.0, 9.0],
 ['2023-04-04T01:00:00.000Z', 0.0, 0.0, 0.0, 8.0, 8.0, 0.0, 8.0],
 ['2023-04-04T00:00:00.000Z', 0.0, 0.0, 0.0, 9.0, 9.0, 0.0, 9.0],
 ['2023-04-03T23:00:00.000Z', 0.0, 30.0, 0.0, 7.0, 7.0, 0.0, 7.0],
 ['2023-04-03T22:00:00.000Z', 0.0, 30.0, 0.0, -18.0, 0.0, -18.0, 11.0],
 ['2023-04-03T21:00:00.000Z', 0.0, 30.0, 0.0, -20.0, 0.0, -20.0, 9.0],
 ['2023-04-03T20:00:00.000Z', 0.0, 30.0, 0.0, -21.0, 0.0, -21.0, 9.0],
 ['2023-04-03T19:00:00.000Z', 1.0, 30.0, 0.0, -21.0, 0.0, -21.0, 9.0],
 ['2023-04-03T18:00:00.000Z', 12.0, 30.0, 0.0, -21.0, 0.0, -21.0, 9.0],
 ['2023-04-03T17:00:00.000Z', 30.0, 30.0, 0.0, -19.0, 0.0, -19.0, 11.0],
 ['2023-04-03T16:00:00.000Z', 38.0, 30.0, 0.0, -17.0, 0.0, -17.0, 13.0],
 ['2023-04-03T15:00:00.000Z', 45.0, 30.0, 0.0, -13.0, 0.0, -13.0, 16.0],
 ['2023-04-03T14:00:00.000Z', 48.0, 30.0, 0.0, -7.0, 0.0, -7.0, 22.0],
 ['2023-04-03T13:00:00.000Z', 53.0, 30.0, 0.0, 24.0, 24.0, 0.0, 24.0],
 ['2023-04-03T12:00:00.000Z', 62.0, 30.0, 0.0, 18.0, 18.0, 0.0, 18.0],
 ['2023-04-03T11:00:00.000Z', 57.0, 30.0, 0.0, 10.0, 10.0, 0.0, 10.0],
 ['2023-04-03T10:00:00.000Z', 46.0, 30.0, 0.0, -3.0, 0.0, -3.0, 26.0],
 ['2023-04-03T09:00:00.000Z', 29.0, 30.0, 0.0, 30.0, 30.0, 0.0, 30.0],
 ['2023-04-03T08:00:00.000Z', 10.0, 0.0, 0.0, 45.0, 45.0, 0.0, 45.0],
 ['2023-04-03T07:00:00.000Z', 1.0, 0.0, 0.0, 12.0, 12.0, 0.0, 12.0],
 ['2023-04-03T06:00:00.000Z', 1.0, 0.0, 0.0, 16.0, 16.0, 0.0, 16.0],
 ['2023-04-03T05:00:00.000Z', 0.0, 0.0, 0.0, 16.0, 16.0, 0.0, 16.0],
 ['2023-04-03T04:00:00.000Z', 0.0, 0.0, 0.0, 18.0, 18.0, 0.0, 18.0],
 ['2023-04-03T03:00:00.000Z', 0.0, 0.0, 0.0, 16.0, 16.0, 0.0, 16.0],
 ['2023-04-03T02:00:00.000Z', 0.0, 0.0, 0.0, 16.0, 16.0, 0.0, 16.0],
 ['2023-04-03T01:00:00.000Z', 0.0, 0.0, 0.0, 16.0, 16.0, 0.0, 16.0],
 ['2023-04-03T00:00:00.000Z', 0.0, 0.0, 0.0, 16.0, 16.0, 0.0, 16.0],
 ['2023-04-02T23:00:00.000Z', 0.0, 0.0, 0.0, 16.0, 16.0, 0.0, 16.0],
 ['2023-04-02T22:00:00.000Z', 0.0, 0.0, 0.0, 16.0, 16.0, 0.0, 16.0],
 ['2023-04-02T21:00:00.000Z', 0.0, 30.0, 0.0, 15.0, 15.0, 0.0, 15.0],
 ['2023-04-02T20:00:00.000Z', 0.0, 30.0, 0.0, -11.0, 0.0, -11.0, 19.0],
 ['2023-04-02T19:00:00.000Z', 1.0, 30.0, 0.0, -18.0, 0.0, -18.0, 12.0],
 ['2023-04-02T18:00:00.000Z', 11.0, 30.0, 0.0, -21.0, 0.0, -21.0, 9.0],
 ['2023-04-02T17:00:00.000Z', 27.0, 30.0, 0.0, -22.0, 0.0, -22.0, 8.0],
 ['2023-04-02T16:00:00.000Z', 37.0, 30.0, 0.0, -19.0, 0.0, -19.0, 11.0],
 ['2023-04-02T15:00:00.000Z', 50.0, 30.0, 0.0, -4.0, 0.0, -4.0, 25.0],
 ['2023-04-02T14:00:00.000Z', 33.0, 30.0, 0.0, -8.0, 0.0, -8.0, 21.0],
 ['2023-04-02T13:00:00.000Z', 53.0, 30.0, 0.0, -14.0, 0.0, -14.0, 16.0],
 ['2023-04-02T12:00:00.000Z', 38.0, 30.0, 0.0, -13.0, 0.0, -13.0, 17.0],
 ['2023-04-02T11:00:00.000Z', 36.0, 30.0, 0.0, -15.0, 0.0, -15.0, 15.0],
 ['2023-04-02T10:00:00.000Z', 34.0, 30.0, 0.0, -20.0, 0.0, -20.0, 10.0],
 ['2023-04-02T09:00:00.000Z', 24.0, 0.0, 0.0, 8.0, 8.0, 0.0, 8.0],
 ['2023-04-02T08:00:00.000Z', 8.0, 0.0, 0.0, 9.0, 9.0, 0.0, 9.0],
 ['2023-04-02T07:00:00.000Z', 1.0, 0.0, 0.0, 9.0, 9.0, 0.0, 9.0],
 ['2023-04-02T06:00:00.000Z', 1.0, 0.0, 0.0, 11.0, 11.0, 0.0, 11.0],
 ['2023-04-02T05:00:00.000Z', 0.0, 0.0, 0.0, 12.0, 12.0, 0.0, 12.0],
 ['2023-04-02T04:00:00.000Z', 0.0, 0.0, 0.0, 15.0, 15.0, 0.0, 15.0],
 ['2023-04-02T03:00:00.000Z', 0.0, 0.0, 0.0, 10.0, 10.0, 0.0, 10.0],
 ['2023-04-02T02:00:00.000Z', 0.0, 0.0, 0.0, 9.0, 9.0, 0.0, 9.0],
 ['2023-04-02T01:00:00.000Z', 0.0, 0.0, 0.0, 10.0, 10.0, 0.0, 10.0],
 ['2023-04-02T00:00:00.000Z', 0.0, 0.0, 0.0, 9.0, 9.0, 0.0, 9.0],
 ['2023-04-01T23:00:00.000Z', 0.0, 0.0, 0.0, 9.0, 9.0, 0.0, 9.0],
 ['2023-04-01T22:00:00.000Z', 0.0, 0.0, 0.0, 14.0, 14.0, 0.0, 14.0],
 ['2023-04-01T21:00:00.000Z', 0.0, 30.0, 0.0, -10.0, 0.0, -10.0, 20.0],
 ['2023-04-01T20:00:00.000Z', 0.0, 30.0, 0.0, -13.0, 0.0, -13.0, 16.0],
 ['2023-04-01T19:00:00.000Z', 1.0, 30.0, 0.0, -14.0, 0.0, -14.0, 15.0],
 ['2023-04-01T18:00:00.000Z', 8.0, 30.0, 0.0, -14.0, 0.0, -14.0, 15.0],
 ['2023-04-01T17:00:00.000Z', 22.0, 30.0, 0.0, 25.0, 25.0, 0.0, 25.0],
 ['2023-04-01T16:00:00.000Z', 32.0, 30.0, 0.0, 14.0, 14.0, 0.0, 14.0],
 ['2023-04-01T15:00:00.000Z', 38.0, 30.0, 0.0, 9.0, 9.0, 0.0, 9.0]];

function extractColumnToList(sampleResponse, columni) {
  let result = [];
  for (let i = columni; i < sampleResponse.length; i++) {
    result.push(sampleResponse[i][columni]);
  }
  return result;
}

let result = extractColumnToList(sampleResponse);
console.log(result);

var hours = extractColumnToList(sampleResponse, 0); 

// code for consumption 
var endDate = new Date("2024-03-04T00:00:00");
var startDate = new Date(endDate.getTime() - 72*60*60*1000);



var seriesName1 = "Building Energy Consumption (kWh)" 
var seriesName2 = "Battery Energy Charged (kWh)" 
var seriesName3 = "EV Charger Energy Delivered (kWh)"

var barColor1 = "546EC8"
var barColor2 = "64B583"
var barColor3 = "3ABCDE"

var trace1 = {
    x: hours,
    y: extractColumnToList(sampleResponse, 1),
    type: "bar",
    marker: {color: barColor1},
    name: seriesName1,
    hovertemplate: "On <b>%{x}</b><br>" + seriesName1 + "<b>%{y:.0f} kWh</b><extra></extra>"
};

var trace2 = {
    x: hours,
    y: extractColumnToList(sampleResponse, 7),
    type: "bar",
    marker: {color: barColor2},
    name: seriesName2, 
    hovertemplate: "On <b>%{x}</b><br>" + seriesName2 + " <b>%{y:.0f} kWh</b><extra></extra>"
};

var trace3 = {
    x: hours,
    y: extractColumnToList(sampleResponse, 5),
    type: "bar",
    marker: {color: barColor3},
    name: seriesName3, 
    hovertemplate: "On <b>%{x}</b><br>" + seriesName3 + "<b>%{y:.0f} kWh</b><extra></extra>"
};

var data = [trace3, trace1, trace2];

var layout = {
    //title: "72 Hour Solar Generation Data",
   showlegend : true,
    legend : {
        x : 1, xanchor: 'auto',
        y : 1.1, yanchor: "bottom",
        traceorder : 'normal',
        font : {
            family : 'Helvetica', // This is probably not inline with the Figma
            size : 14, // This is probably not inline with the Figma
            color : '#000' // This is probably not inline with the Figma
        }
    },
    xaxis: { title: "", type:"date",
            tickfont: {
              family: "Helvetica",
      size: 18
    }, dtick: 6 * 60 * 60 * 1000  },
    yaxis: {
      tick0: 20, 
      title: "kWh", 
           tickfont: {
           family: "Helvetica", // This is probably not inline with the Figma
           size: 15}, // This is probably not inline with the Figma
           dtick: 20,
          },
          
    width: 1531, 
    height: 530, 
    plot_bgcolor: 'rgba(0,0,0,0)', 
    paper_bgcolor: 'rgba(0,0,0,0)'
};


var layout = {
   barmode: "stack",
   showlegend : true,
    legend : {
        x : 1, xanchor: 'auto',
        y : 1.1, yanchor: "bottom",
        traceorder : 'normal',
        orientation: "h",
        font : {
            family : 'Helvetica',
            size : 14,
            color : 'white'
        }
    },
    xaxis: { title: "",
            type: "date",
            color: "white",
            tickfont: {
              family: "Helvetica",
      size: 18
    }, dtick: 6 * 60 * 60 * 1000  },
    yaxis: {
      tick0: 20, 
      title: "kWh", 
      color: "white",
           tickfont: {
           family: "Helvetica",
           color: "white",
           size: 15}, 
           dtick: 20,
          },
          
    width: 1531, 
    height: 530, 
    plot_bgcolor: '#040932', 
    paper_bgcolor: '#040932'
};

Plotly.newPlot("myDiv", data , layout);
